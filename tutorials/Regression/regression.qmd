---
title: "Regression in R"
author: "W. Joel Schneider"
description: "A step-by-step introduction to regresion in R"
date: 2024-03-07
format: 
  html: 
    df-print: kable
engine: knitr
execute: 
  freeze: true
  cache: true
knitr:
  opts_chunk: 
    out-width: 100%
    fig-height: 7
    fig-width: 7
    dev: "ragg_png"
---

```{r}
#| label: setup
#| include: false
library(tidyverse)
library(easystats)
library(rempsyc)

options(digits = 3, knitr.kable.NA = '', knitr.kable.digits = 2)

```

Here we are going to use a small data set to predict people's height using the height of their parents.

# Install packages

An **R package** is software that extends the capabilities of R. To use a package, you must first install it on your machine. You only need to install it once.

## Install tidyverse 

Some packages are designed to work with several other packages as a system. The [tidyverse package](https://www.tidyverse.org/) is a "meta-package" that installs and loads a coherent set of packages designed to help you import, manipulate, visualize, and interpret data. If you do not have a recent version of tidyverse already installed, you can install it with this code:

```{r installtidyverse}
#| eval: false
install.packages("tidyverse")
```



## Install easystats

The [easystats](https://easystats.github.io/easystats/) package is another "meta-package" that installs a set of packages designed to work together to make data analysis easier.


If you do not have a recent version of easystats already installed, you can install it with this code:

```{r installeasystats}
#| eval: false
install.packages("easystats")
```


# Load packages

A package that is installed on your machine has additional functions that you can use. Each session, you can "load" a package with the `library` function:

```{r loadpacakges}
library(tidyverse) # Loads primary packages for data wrangling and plotting
library(easystats) # Loads packages that make extracting data from model fit objects easier
```


# Import data

:::{.column-margin}
If I use only one data set in an analysis, I call it `d`. If I need multiple data sets, I use a `d_` prefix to differentiate them. For example, if I have separate data sets for juniors and seniors, I might call them, `d_juniors` and `d_seniors`, respectively. This kind of consistency seems like extra work, but it pays off in making it easy for *future-you* to read and understand your own code.
:::

You can import the `height.csv` data set directly from my github repository for this course. There is no need to save the data anywhere. 

```{r import}
#| message: false
d <- read_csv("https://github.com/wjschne/EDUC5325/raw/master/height.csv")

```

This code reaches across the web to the file in quotes, "reads" it into our session, and holds the data in a new variable we called `d`. Every time we need the data, we will get it from the `d` variable.

The `head` function, by default, displays the first 6 rows of a `data.frame` (a collection of variables in which all columns have the same number of rows) or `tibble` (a `data.frame` with various enhancements for printing and data creation).

```{r headd}
head(d)
```

*Dataset variables*

- `idnum` An identifying variable for each student
- `avgphgt` Average of parent height
- `income` Parental income
- `calcium` Calcium intake
- `age` Student age
- `gender` Student gender
- `weight` Student weight (in pounds)
- `height` Student height (in inches)
- `smoke15` Number of cigarettes smoked per week


# Make a plot

Let's predict student height (`height`) from the average of their parents' height (`avgphgt`).

Use the [`ggplot`](https://ggplot2.tidyverse.org/reference/ggplot.html) function from the [ggplot2](https://ggplot2.tidyverse.org/) package to make a scatterplot with points and a regression line in @fig-regressionplot.

```{r fig-regressionplot}
#| classes: preview-image
#| fig-cap: Regression line with its 95% confidence region
#| message: false
ggplot(d, aes(avgphgt, height)) +
  geom_point() +
  geom_smooth(method = "lm")
```

@fig-annotated gives an annotated explanation of what the code does.

![Annotated ggplot2 code](ggplotcode.svg){#fig-annotated}

Note that this plot is not quite presentation worthy. For example, @fig-presentationworthy improves upon @fig-regressionplot by having proper axis labels, spacing the axis ticks, setting the aspect ratio to 1:1, and setting the font and font size to make .

```{r fig-presentationworthy}
#| fig-cap: Regression line with its 95% confidence region
#| message: false
ggplot(d, aes(avgphgt, height)) +
  geom_point() +
  geom_smooth(method = "lm") + 
  scale_x_continuous("Average Parent Height (inches)", 
                     limits = c(60, 75)) +
  scale_y_continuous("Student Height (inches)", 
                     limits = c(60, 75)) + 
  coord_equal() + 
  theme_gray(base_family = "Roboto Condensed", 
             base_size = 18)
```



## Save the plot!

You can save to your hard drive a high-quality plot with the [`ggsave`](https://ggplot2.tidyverse.org/reference/ggsave.html) function. It will save whatever the last plot you created with [`ggplot`](https://ggplot2.tidyverse.org/reference/ggplot.html). It will guess the file format from the file extension. 

Here I save a .pdf file of the plot to the working directory:

```{r saveplot}
#| eval: false
ggsave("my_plot.pdf")
```

What is the working directory? Is the folder on your machine that R thinks it should look first if it needs to find files or save files. If you are ever curious about which directory is the working directory, you can see the current working directory with the `getwd` function:

```{r workingdirectory}
#| eval: false
getwd()
```

If you saved the plot above as `"my_plot.pdf"`, you will find the file in the working directory returned by `getwd`.

If you need to set the working working directly to something different from what it is, use the `setwd` function. In the `Session` menu in RStudio, you can also set the working directory with a point-an-click dialog box.


## Vector-based images

The .pdf format gives the best image quality but can only be viewed in a .pdf reader. The .svg format is almost as good and can be incorporated into webpages and Office documents. One downside of their near-perfect image quality is that .pdf and .svg image file sizes can become quite large. 

## Raster images

The .png format gives good image quality and renders small file sizes. I prefer using the `ragg::agg_png` device to render a .png because it allows me to use any system font with no extra fuss. 

```{r ragg}
#| echo: true
#| message: false
#| eval: false
ggsave("my_plot.png", device = ragg::agg_png)
```

The primary use of the .gif format is to create animated plots. Otherwise stick with .png.

Although the .jpg format is good for photos, it is terrible for plots---it often renders text and sharp corners with pixelated smudges. 

# Creating the regression model

To run regression models, use the [`lm`](https://www.rdocumentation.org/packages/stats/versions/3.6.2/topics/lm) function. The `lm` stands for "linear model." The general pattern is `lm(Y~X, data = d)`, which means "`Y` is predicted by `X`, using the data set `d`."

Here we predict height from Average of Parent Height (`avgphgt`):

```{r m1}
m1 <- lm(height~avgphgt, data = d)
```

Notice that we did not get any results. Instead, we created the model fit object `m1`, which contains information about the model. There are a variety of functions we can use to extract information from `m1`.

# Checking assumptions

Regression assumes that the observations should independent, and the residuals should be normal and homoscedastic. The [performance package](https://easystats.github.io/performance/index.html) has a great function for checking model assumptions: [`check_model`](https://easystats.github.io/performance/reference/check_model.html)

```{r fig-checkmodel}
#| fig-height: 8
#| fig-cap: Regression diagnostic plots
check_model(m1)
```

In @fig-checkmodel we see that none of the assumptions have been severely violated. Normally, we would stop here. If needed, we can look at each plot one at a time.

## Posterier Predictions


```{r fig-posterior}
#| fig-cap: Posterior Predictive Check
diagnostic_plots <- plot(check_model(m1, panel = FALSE))
diagnostic_plots[[1]]
```

The @fig-posterior generates several sets of random "simulated" data based on the model and plots the distributions as the thin blue lines. Each simulated data set is of the same size as the original data. The thicker green line is based on the observed data. If the blue lines have roughly the same shape as the green line, then the model is likely of the right form. 

The green line is not that far off from the blue lines, but the green line appears to have 2 peaks, and most of the blue lines have one peak. Because we know that males and females have different mean heights, there is a good chance that we need to model their heights separately. We will do so later in the tutorial.

The [tutorial for the `check_model` function](https://easystats.github.io/performance/articles/check_model.html) gives an example of a posterior prediction check that signals that something is awry.

## Linearity Assumption

```{r fig-linearity}
#| fig-cap: Linearity assumption
diagnostic_plots[[2]]
```

In @fig-linearity, we see that the fitted values (i.e., $\hat{Y}$ or predicted values) plotted against the residuals is roughly flat and horizontal. If the green line were clearly not flat, we would consider non-linear models.

## Homogeneity of Variance Assumption


```{r fig-homogeneity}
#| fig-cap: Homogeneity of variance assumption
diagnostic_plots[[3]]
```

@fig-homogeneity is similar to @fig-linearity except that the fitted values are  standardized (i.e., converted to z-scores) and then square root of their absolute values are plotted on the *Y*-axis. The homogeneity of variance assumption requires that variability of the residuals should be roughly the same across the entire distribution of fitted values. Thus, the line in @fig-homogeneity should be roughly flat and horizontal, which it is. Indeed, we can draw a horizontal line entirely within the gray confidence region around the green line.

## Influential Observations and Outlier Detection


```{r fig-influential}
#| fig-cap: Influential observations
diagnostic_plots[[4]]
```

Sometimes a single outlier can radically alter a regression model. The plot in @fig-influential shows how influential each point is in creating the regression model. If any point is outside the green dotted lines, we might worry that the point has had undue influence on the model.

Many additional outlier detection methods are available via the `check_outliers` function:

```{r checkoutliers}
#| message: false
check_outliers(m1, method = "all")
```


## Normality Assumption

The normality assumption does not require that all variables be normal. It requires that the prediction residuals be approximately normal. 

```{r fig-normality}
#| fig-cap: Normality assumption
diagnostic_plots[[5]]
```


If the residuals were perfectly normal, the blue dots would fall exactly on the green line in @fig-normality. The blue dots are not that far from the green line. Because ordinary least squares is robust to minor violations of the normality assumption, nothing in @fig-normality should make us worry about needing to model the data with some other kind of residuals.


If we suspect that the residuals are generated from a different distribution, the `check_distribution` function will estimate the probability that the residuals (and response/outcome variable) come from 12 major distribution families:

```{r m1checkdistribution}
check_distribution(m1) 
plot(check_distribution(m1))
```

Here we see that of the 12 major distribution families tested, the residuals are more likely normal than any of the others. After we control for gender, this probability will increase. If the results had strongly suggested the residuals were generated from one of the other distributions, we might consider switching from a linear model to a [generalized linear model](https://en.wikipedia.org/wiki/Generalized_linear_model).





# Summarising results

Base R gives you most of what you would want to know about the regression results with the `summary` function:

```{r summarym1}
summary(m1)
```

This output is not pretty, nor was it intended to be. It is designed for you, the analyst. The `summary` function's print method is optimized for reading results in the console, not in a document.  Presentation-worthy results need a lot more care and attention.

An automated report from the [report](https://easystats.github.io/report/articles/report.html) package:

```{r report_m1}
#| warning: false
report::report(m1)
```



## Model-level statistics

Some statistics like the *coefficient of determination* (*R*^2^) or the *standard error of the estimate* (*&sigma;~e~*) describe the model as a whole.


### *R*^2^


The *R*^2^ statistic measures the percentage of variance in the outcome explained by the predictors.

$$
R^2=\frac{\sigma_{\hat{Y}}^2}{\sigma_{Y}^2}=1-\frac{\sigma_e^2}{\sigma_Y^2}
$$


The model-level statistics can be extracted with the performance package's [`model_performance`](https://easystats.github.io/performance/reference/model_performance.lm.html) function.

```{r performancem1}
performance(m1)
```




*R*^2^ is the percentage of variance in the outcome variable (i.e., Height) explained by the predictor variables (i.e., Average Parent Height). In @fig-r2, the black line toggles between the best fitting regression line and the horizontal line running through the outcome variable's mean. The vertical line segments running from each point to the black line are, on average, smaller for the best fitting regression line. Their squared distances shrink, on average, by `r round(100 * performance::r2(m1)$R2, 0)`%. Thus, we say that the predictor variance "explains" `r round(100 * performance::r2(m1)$R2, 0)`% of the variance in the outcome variable.

```{r fig-r2}
#| fig-cap: "Percentage of Variance Explained"
#| warning: false
#| code-fold: true
r <- d %>% select(avgphgt, height) %>% cor() %>% `[[`(1, 2)
m <- d %>% select(avgphgt, height) %>% colMeans()
s <- d %>% select(avgphgt, height) %>% sapply(sd)
n <- 2
d_slope <- tibble(id = c("0.00", round(r^2, 2)),
                  r = seq(0, r, length.out = n)) %>%
  mutate(i = -1 * r * m[1] * s[2] / s[1] + m[2], 
         b = r * s[2] / s[1])
library(gganimate)
anim <- d %>% select(idnum, avgphgt, height) %>%
  crossing(d_slope) %>%
  mutate(yhat = b * avgphgt + i, 
         Error = height - yhat) %>%
  arrange(idnum, Error) %>%
  ggplot(aes(avgphgt, height)) +
  geom_abline(aes(slope = b, intercept = i)) +
  geom_segment(aes(xend = avgphgt, yend = yhat, color = Error)) +
  geom_point() +
  transition_states(id, state_length = 3, transition_length = 1) +
  scale_color_gradient2(
    low = "royalblue4",
    mid = "gray",
    high = "firebrick4",
    breaks = seq(-6, 6, 2),
    labels = signs::signs
  ) +
  scale_x_continuous("Average Parent Height (inches)", limits = c(60, 75)) +
  scale_y_continuous("Student Height (inches)", limits = c(60, 75)) +
  labs(title = "Variance Explained = {closest_state}") +
  coord_equal() +
  theme_minimal(base_family = "Roboto Condensed", base_size = 18) +
  theme(
    legend.text.position = "left",
    legend.text = element_text(hjust = 1),
    legend.key.height = unit(2, "cm")
  )
gganimate::animate(
  anim,
  nframes = 50 * 4,
  device = "ragg_png",
  width = 10,
  height = 10,
  fps = 50,
  res = 144
)
```

If all you wanted was the *R*^2^, you could do this:

```{r r2m1}
performance(m1)$R2
```

Why would you want just one number instead of reading it from a table? In reproducible research, we intermingle text and code so that it is clear where every number came from. Thus, "hard-coding" your results like this is considered poor practice:

```
The model explains 64% of the variance.
```

Using rmarkdown, instead of typing the numeric results, we type pull the results using an [inline code chunk](https://rmarkdown.rstudio.com/lesson-4.html):


```
The model explains `{{r}} round(100 * r2(m1)$R2, 0)`% of the variance.
```

Which, when rendered, produces the correct output:

> The model explains `r round(100 * performance::r2(m1)$R2, 0)`% of the variance.

That seems like a lot of extra work, right? Yes, it is---unless there is a possibility that your underlying data might change or that you might copy your numbers incorrectly. If you are imperfect, the extra time and effort is worth it. It makes it easy for other scholars to see exactly where each number came from. Hard-coded results are harder to trust.

Regression errors are the vertical distances of the outcome variable and regression line. That is, errors are the difference between the outcome and the predicted outcome: 

$$
e=Y-\hat{Y}
$$

### Standard Error of the Estimate (*&sigma;~e~*)

The *standard error of the estimate* (i.e., Sigma in the `performance` output table) is the standard deviation of the regression errors $\sigma_{e}$. It represents the typical size of the prediction error. That is, when we make a prediction, how far off is that prediction likely to be? 

The standard error of the estimate can be extracted from a regression fit object with the `sigma` function:

```{r sigmam1}
sigma(m1)
```

Alternately, it can be extracted from the `performance` function's output:

```{r getsigma}
performance(m1)$Sigma
```


## Coefficient-level statistics

The regression coefficients---the intercept (*b*~0~) and the slope (*b*~1~)---have a number of statistics associated with them, which we will discuss later in the course.

If you just wanted the intercept and the slope coefficients, use the `coef` function:

```{r coefm1}
coef(m1)
```

Thus, the intercept is `r round(coef(m1)[1],2)` and the slope is `r round(coef(m1)[2],2)`.

To get the model parameters (intercept and slope coefficients) along with their standard errors, confidence intervals, *t* statistics, and *p*-values:

```{r parametersm1}
parameters(m1) 
```

Standardized parameters are the regression coefficients if all variables in the analysis were standardized (i.e., convernted to *z*-scores). Standardized coefficients have a straightforward interpretation: They represent the predicted change in the outcome associated with a change of 1 standard deviation in the predictor variable.

```{r standardparm1}
standardize_parameters(m1)
```


# Multiple regression

In this data set, all participants self-identified as either male or female on the traditional gender binary. We would predict that males are, on average, taller than females. 

By default, the first category in a factor or character (text) variable is the "reference level" that all other categories are compared to. In R, a factor can list categories in any order. In character variables, the categories are listed in alphabetical order. The `gender` variable consists of text, so the `lm` function puts the "female" category first and the "male" category second. Thus, the regression coefficient for `gender` will refer to how much "Males" differ from "Females," on average. If want to do it the other way around, you can reverse the order of the levels and labels in the `factor` function. See also the [`fct_rev`](https://forcats.tidyverse.org/reference/fct_rev.html) or [`fct_relevel`](https://forcats.tidyverse.org/reference/fct_relevel.html) function for other ways to do this.


We run the regression model with 2 predictors like so:

```{r m2}
m2 <- lm(height ~ avgphgt + gender, data = d)
```


## Checking assumptions

```{r fig-checkmodelm2}
#| fig-height: 8
#| fig-cap: Assumption check for model 2
check_model(m2)

```

The diagnostic plots in @fig-checkmodelm2 looks good. It has one additional plot checking the collinearity of the predictors. If any predictor is strongly predictable from the other predictors, it is difficult for ordinary least squares regression to locate the regression coefficients with precision. Why? Because the regression coefficients represent the independent effect of each variable controlling for all the other variables. If a predictor has little variability left after controlling for the other variables, estimating its independent effect is difficult, which is manifest in "inflated" standardized errors around the coefficient. The VIF (variance inflation factor) statistic estimates how much the standard errors are made large due to collinearity. If the VIF is larger than 10 or so, it is likely that the estimate of the coefficient is not precise.

## Summarizing results

To summarize the results, use the `summary` function:

```{r summarym2}
summary(m2)
```

Model-level statistics:

```{r m2performance}
performance(m2)
```

Coefficient-level statistics:

```{r m2parameters}
parameters(m2)
```


Standardized coefficients:

```{r standardizedm2}
standardize_parameters(m2)
```


An automated report:

```{r reportm2}
#| warning: false
report(m2)
```


## Comparing models

In the first model, there was only one predictor. The second model had an additional predictor. To test whether the second predictor has *incremental validity* (predicts variance in the outcome beyond what is predicted by other predictors), we can compare the two models using the Wald test:

```{r comparem1m2}
test_wald(m1, m2)
```

The Wald test can also be conducted in base R with the `anova` function:

```{r m1m2anova}
anova(m1, m2)
```

Either way, the p-value is significant, meaning that `m2` explains more variance than `m1`.

The semi-partial correlation coefficient squared tells us how much incremental variance each predictor has over the other:

```{r m2semipartial}
r2_semipartial(m2)
```

Thus, `gender` explains `r round(100 * effectsize::r2_semipartial(m2)$r2_semipartial[2], 0)`% variance beyond `avgphgt`. Likewise, `avgphgt` explains `r round(100 * effectsize::r2_semipartial(m2)$r2_semipartial[1], 0)`% variance beyond `gender`.

### Bayes Factors

An alternate method of comparing two models uses the Bayes factor. It tells us under which model the observed data are more probable.

```{r bayesm1m2}
test_bf(m1, m2)
```

A BF > 1 means that `m2` is more strongly supported than `m1`. A BF < 1 means that `m1` is more strongly supported than `m2`. If you are not sure how to interpret the output of `test_bf`, you can get an automated interpretation:

```{r reportbayes}
test_bf(m1, m2) %>% 
  report()
```

To compare many performance statistics at once: 

```{r comparemodelperformance}
compare_performance(m1, m2) 
```


# Pretty Regression Tables

There are several packages that automate the production of pretty regression tables. There is a trade-off here between ease of use and getting exactly what you want. If you are okay with a function's defaults and the programmer's choices, then there is no problem. If you want full control of the display, you are best off creating your own functions or adapting existing functions. 

:::{.panel-tabset}

## sjPlot

The [`tab_model` function in sjPlot](https://strengejacke.github.io/sjPlot/articles/tab_model_estimates.html) looks great as is, but if it gives you too much or not enough, check out [its options](https://strengejacke.github.io/sjPlot/reference/tab_model.html) to see if it can do what you want.

Show a single model

```{r tabmodel1}
sjPlot::tab_model(m1)
```

Compare nested models

```{r tabmodel12}
sjPlot::tab_model(m1, m2)
```

## gtsummary

```{r gtsummary}

library(gtsummary)
# Plain table
tbl_regression(m1)


# Merging tables
tbl_merge(tbls = list(tbl_regression(m1) %>% add_glance_table(),
                      tbl_regression(m2) %>% add_glance_table()),
          tab_spanner = c("Parent Height", "Parent Height + Gender")) 

# Stacking tables
tbl_stack(list(tbl_regression(m1), tbl_regression(m2)),
          group_header = c("Parent Height", "Parent Height + Gender"))
```

## rempsych

```{r rempsych}
parameters(m2) %>% 
  rempsyc::nice_table()

m2 %>% 
  report_table() %>% 
  rempsyc::nice_table()

```


## flextable

A primary advantage of the flextable package is that it is compatible with MS Word's .docx format as well as .html and .pdf.

```{r flextable}
m2 %>% 
  flextable::as_flextable()
```


:::


# Case-level Statistics

A great deal of information can be extracted about each row in your data. Perhaps the most important among these are the predicted value of the outcome variable and the error/residual. The `estimate_prediction` function gives these values, as well as the standard error around the prediction and the 95% confidence interval.

```{r caseprediction}
estimate_prediction(m1)
```

The `augment` function from the broom package gives the predicted value (`.fitted`), the residual (`.resid`), the residual converted to a standardized z-score (`.std.resid`), Cook's distance (.cooksd) to identify influential cases, hat values (`.hat`) to identify cases that have leverage (i.e., the potential to be influential), and `.sigma` (the estimated residual standard deviation when the corresponding observation is dropped from the model).

```{r broomaugment}
broom::augment(m1)
```


The idea of leverage can be found in @fig-leverage. When the red dot has an extreme value of *x*, it can easily alter where the regression line will be, depending on the value of *y*. That is, extreme values of *x* have *leverage*. When the red dot has a value of *x* in the middle, the value of *y* will have little effect on the location of the regression line. Thus, values of *x* near the mean have little leverage. When there are multiple predictors, the hat values help spot cases with leverage even though a visualization is not always possible.

![Animation showing preditor values with high and low leverage](leverage.gif){#fig-leverage}


# All the code in one place:

The preceding analyses might seem like a lot, but it is not really so much when you see it all in just a few lines of code. Here are all the main analyses:

```{r allthecodeinoneplace}
#| eval: false
# Load packages
library(tidyverse)
library(easystats)

# Import data
d <- read_csv("https://github.com/wjschne/EDUC5325/raw/master/height.csv")

# Plot data
ggplot(d, aes(weight,height)) +
  geom_point() +
  geom_smooth(method = "lm")

# Save plot
ggsave("my_plot.pdf")

# Create regression model
m1 <- lm(height~avgphgt, data = d)

# Check model assumptions
check_model(m1)

# Display results
summary(m1)
# Model fit
performance(m1)
# Model parameters
parameters(m1)

# Multiple regression
m2 <- lm(height ~ avgphgt + gender, data = d)
summary(m2)
parameters(m2, standardize = "refit")

# Compare model m1 and model m2
test_wald(m1, m2)
test_bf(m1, m2)
compare_performance(m1, m2)
```

# Questions

Use the Transfer of Learning data set. A set of 38 inmates participated in a study that tested the Transfer of Learning Hypothesis. Some people believe that studying Latin is particularly beneficial for progress in other academic disciplines. Each inmate was given a reading test and a math test before the study began. Some inmates were randomly assigned to participate in a 48-week Latin course. The control group studied the lives of famous athletes for the same time period. Each inmate took the reading and math test again to see if studying Latin improved their academic skills. Personal information was also collected about each inmate including their annual income before going to prison, whether or not the inmate had a documented learning disorder, and whether or not the inmate had been convicted of a violent offense. Here are the variable names:

* `read_1` = Reading before study
* `read_2` = Reading after study
* `math_1` = Math before study
* `math_2` = Math after study
* `latin` = 1 (Studied Latin), 0 (Studied sports history)
* `violent` = 1 (convicted of a violent offense), 0 (convicted of a non-violent offense)
* `learning` = 1 (Learning disabled), 0 (Not learning disabled)
* `income` = Annual income before incarceration

```{r importtransfer}
#| message: false
d_learn <- read_csv("https://github.com/wjschne/EDUC5529/raw/master/transfer_of_learning.csv") 
```

Assume &alpha; = 0.05 for all hypothesis tests.

Create a regression model in which you predict reading at time 2 (`read_2`) using reading at time 1 (`read_1`). Call the model fit object `m_read`.

## Question 1

Is `read_1` a significant predictor of `read_2`?

:::{.callout-note collapse=true}
### Hint 1

Make model fit object called `m_read` using the `lm` function.

```{r q1model}
#| include: false
m_read <- lm(read_2 ~ read_1, data = d_learn)
```

```{r q1modeldisplay}
#| eval: false
m_read <- lm(read_2 ~ read_1, data = d_learn)
```

:::


:::{.callout-note collapse=true}
### Hint 2

View coefficient-level statistics with the `parameters` function.

You could also use Base R's `summary` function.

```{r q1parameters}
#| eval: false
parameters(m_read)

# or

summary(m_read)
```

:::


:::{.callout-note collapse=true}
### Hint 3

In the read_1 row, is the p.value column less than 0.05?

```{r q1pvalues}
parameters(m_read)
```

:::

## Question  2

What is the *R*^2^ for the `m_read` model?

:::{.callout-note collapse=true}
### Hint

View model-level statistics with the `performance` function.

You could also use Base R's `summary` function.

```{r q2summary}
#| eval: false

performance(m_read)

# or

summary(m_read)
```

:::

## Question 3

What does the scatter plot look like when `read_1` is on the *x*-axis and `read_2` is on the *y*-axis? Also plot the regression line. Save your plot using the `ggsave` function.

:::{.callout-note collapse=true}
### Hint for Getting Started

This will get you started

```{r q3start}
#| eval: false

ggplot(d_learn, aes(read_1, read_2))
```

:::

:::{.callout-note collapse=true}
### Hint for Adding Points

Here is how you add points.

```{r q3point}
#| eval: false

ggplot(d_learn, aes(read_1, read_2)) +
  geom_point() 
```

:::

:::{.callout-note collapse=true}
### Hint for Adding a Regression Line

Here is how you add a regression line.

```{r q3line}
#| eval: false

ggplot(d_learn, aes(read_1, read_2)) +
  geom_point() + 
  geom_smooth(method = "lm") 
```

:::

:::{.callout-note collapse=true}
### Plot Polishing

This is overkill for now. But someday you might want to be able to make your plots as polished as possible.

```{r q3polishing}
#| fig-width: 6
#| fig-height: 7
#| message: false
# I want to put the equation at x = 130
equation_x <- 130
equation_y <- predict(m_read, newdata = tibble(read_1 = equation_x))

# Extracting the coefficients
b_read <- round(coef(m_read),2)

# The angle of the regression line is the inverse tangent of the slope (converted to degrees)
eq_angle <- atan(b_read[2]) * 180 / pi

# Equation
eq_read <- paste0("italic(Y) == ", 
                  b_read[1], 
                  " + ", 
                  b_read[2], 
                  " *  italic(X) + italic(e)")

ggplot(d_learn, aes(read_1, read_2)) +
  geom_point() +
  geom_smooth(method = "lm") +
  labs(x = "Reading at Time 1",
       y = "Reading at Time 2",
       title = "Using Reading at Time 1 to Predict Reading at Time 2") +
  coord_fixed() +
  theme_minimal() +
  annotate(
    geom = "text",
    x = equation_x,
    y = equation_y,
    angle = eq_angle,
    label = eq_read,
    parse = TRUE,
    vjust = -0.5)
```

:::

## Question 4

Create a regression model in which you predict math at time 2 (`math_2`) using reading at time 1 (`math_1`). Call the model fit object `m_math1`.

Does `math_1`  predict `math_2`?.


Does `math_1` still predict `math_2` after controlling for `read_1`?

:::{.callout-note collapse=true}
### Hint

```{r q4}
#| eval: false
m_math <- lm(math_2 ~ math_1 + read_1, data = d_learn)
summary(m_math)
```

:::






